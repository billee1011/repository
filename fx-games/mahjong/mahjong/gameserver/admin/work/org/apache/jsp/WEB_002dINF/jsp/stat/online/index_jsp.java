/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2017-03-14 07:19:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.stat.online;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 request.setAttribute("ctx", request.getContextPath()); 
      out.write("\r\n");
      out.write("<div class=\"title_area\" style=\"height: 85px\">\r\n");
      out.write("\t<h2>游戏区在线</h2>\r\n");
      out.write("\t<form>\r\n");
      out.write("\t\t<div class=\"r relative\" id=\"datePicker\">\r\n");
      out.write("\t\t\t<a class=\"time\" id=\"datePicker_a\">\r\n");
      out.write("\t\t\t<span><p>日期选择<b id=\"displayDateTip\" style=\"font-weight:normal\"> : 查询日期</b><br><font class=\"calendar\" id=\"dateValue\">2014-06-04</font></p></span></a>\r\n");
      out.write("\t\t\t<div class=\"timetxt hide panone\" id=\"datePanel\" style=\"width: 278px; left: 0px; display: none;\">\r\n");
      out.write("\t\t\t\t<div id=\"dateBanner\" class=\"timetop\"> \r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<p class=\"TimeDef\" id=\"timeInputRoom\">\r\n");
      out.write("\t\t\t\t\t自定<input type=\"text\" id=\"startTime\" name=\"startTime\" class=\"Timeinput\">到 <input type=\"text\" id=\"endTime\" name=\"endTime\" class=\"Timeinput mrnone\">\r\n");
      out.write("\t\t\t\t</p>\r\n");
      out.write("\t\t\t\t<div class=\"opeDiv after\">\r\n");
      out.write("\t\t\t\t\t<small id=\"datamessage\" style=\"display: none; margin-left: 30px;\" class=\"l\"></small>\r\n");
      out.write("\t\t\t\t\t<a class=\"timecolse r Confirm\" id=\"confirmBtn\">确定</a>\r\n");
      out.write("\t\t\t\t\t<a class=\"r Cancel\" id=\"cancelBtn\">取消</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</form>\r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"condition_area\" id=\"condition_area_div\">\r\n");
      out.write("               <div class=\"mod_select_down\">\r\n");
      out.write("                   <a href=\"javascript:void(0);\" onclick=\"return false;\" id=\"search_type_btn\" class=\"btn_white_2 btn_select_outline\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${areaId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\"><span>");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("</span><i class=\"ico\"></i></a>\r\n");
      out.write("                   <div id=\"search_type_list_div\">\r\n");
      out.write("                   <ul class=\"down_list btn_select_outline\" id=\"search_type_list\" style=\"position:static;border:none\">\r\n");
      out.write("                   \t\t ");
      if (_jspx_meth_c_005fforEach_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("               </div>\r\n");
      out.write("               <div class=\"mod_search \">\r\n");
      out.write("                   <button type=\"submit\" id=\"btn_search\"><span class=\"visually_hidden\">查询</span></button>\r\n");
      out.write("               </div>\r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"bd\" style=\"padding-top: 10px;\">\r\n");
      out.write("\t<div id=\"tabs\" class=\"easyui-tabs\" style=\"height: auto;\">\r\n");
      out.write("\t\t<div title=\"区\">\r\n");
      out.write("\t\t\t<div class=\"easyui-tabs childTabs\" style=\"height: auto; margin : 10px\">\r\n");
      out.write("\t\t\t\t<div title=\"图表\">\r\n");
      out.write("\t\t\t\t\t<div id=\"container0\" style=\"height:400px; margin: 20px 10px 20px 10px\"></div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div title=\"数据视图\">\r\n");
      out.write("\t\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t\t<table id=\"dataGrid0\" style=\"padding-top: 10px;height: 600px;overflow: scroll;\"></table>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div title=\"平台\">\r\n");
      out.write("\t\t\t<div class=\"easyui-tabs childTabs\" style=\"height: auto; margin : 10px\">\r\n");
      out.write("\t\t\t\t<div title=\"图表\">\r\n");
      out.write("\t\t\t\t\t<div id=\"container1\" style=\"height:400px; margin: 20px 10px 20px 10px\"></div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div title=\"数据视图\">\r\n");
      out.write("\t\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t\t<table id=\"dataGrid1\" style=\"padding-top: 10px;height: 600px;overflow: scroll;\"></table>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("</div>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("var detailChart = [];\r\n");
      out.write("var masterChart = [];\r\n");
      out.write("var statisticsData = [];\r\n");
      out.write("var nowIndex = 0;\r\n");
      out.write("var maxSize = 0;//适应Y轴title长度\r\n");
      out.write("var queryConfig;//请求配置\r\n");
      out.write("var areaUrl = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/stat/online/online4area.do\";\r\n");
      out.write("\r\n");
      out.write("function createDetail(masterChart,datas,index) {\r\n");
      out.write("    // prepare the detail chart\r\n");
      out.write("    /**\r\n");
      out.write("    var detailData = datas,\r\n");
      out.write("        detailStart = Date.UTC(1000, 7, 1);\r\n");
      out.write("    for(var a = 0 ; a < masterChart.series[0].length ; a++){\r\n");
      out.write("\t    $.each(masterChart.series[a].data, function () {\r\n");
      out.write("\t    \tif (this.x >= detailStart) {\r\n");
      out.write("\t            detailData[a].push(this.y);\r\n");
      out.write("\t        }\r\n");
      out.write("\t    });\r\n");
      out.write("    }*/\r\n");
      out.write("    // create a detail chart referenced by a global variable\r\n");
      out.write("    detailChart = $('#detail-container'+index).highcharts({\r\n");
      out.write("        chart: {\r\n");
      out.write("        \ttype:'area',\r\n");
      out.write("            reflow: false,\r\n");
      out.write("            marginLeft: maxSize * 10 + 20,\r\n");
      out.write("            marginRight: 20,\r\n");
      out.write("            style: {\r\n");
      out.write("                position: 'absolute'\r\n");
      out.write("            }\r\n");
      out.write("        },\r\n");
      out.write("        credits: {\r\n");
      out.write("            enabled: false\r\n");
      out.write("        },\r\n");
      out.write("        title: {\r\n");
      out.write("            text: '在线人数统计图'\r\n");
      out.write("        },\r\n");
      out.write("        tooltip:{\r\n");
      out.write("\t\t\tformatter:function(){\r\n");
      out.write("\t\t\t\t\t\t\treturn this.series.name+\" \"+Highcharts.dateFormat(\"%H:%M:%S\",this.x)+\"<br/>人数:\"+this.y+\"人\";\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("        xAxis: {\r\n");
      out.write("            type: 'datetime',\r\n");
      out.write("            labels:{\r\n");
      out.write("            \tformatter:function(){\r\n");
      out.write("            \t\treturn Highcharts.dateFormat('%H:%M',this.value);\r\n");
      out.write("            \t}\r\n");
      out.write("            }\r\n");
      out.write("        },\r\n");
      out.write("        yAxis: {\r\n");
      out.write("            title: {\r\n");
      out.write("                text: null\r\n");
      out.write("            },\r\n");
      out.write("            floor:0,\r\n");
      out.write("            maxZoom: 0.1\r\n");
      out.write("        },\r\n");
      out.write("        legend: {\r\n");
      out.write("           \talign: 'right',\r\n");
      out.write("            verticalAlign: 'top',\r\n");
      out.write("            x:-70\r\n");
      out.write("        },\r\n");
      out.write("        plotOptions: {\r\n");
      out.write("            series: {\r\n");
      out.write("                marker: {\r\n");
      out.write("                    enabled: false\r\n");
      out.write("                },\r\n");
      out.write("                states: {\r\n");
      out.write("                    hover: {\r\n");
      out.write("                        enabled: false\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            },\r\n");
      out.write("            area: {\r\n");
      out.write("                fillColor: {\r\n");
      out.write("                    linearGradient: { x1: 0, y1: 2, x2: 0, y2: 0},\r\n");
      out.write("                    stops: [\r\n");
      out.write("                        [0, Highcharts.getOptions().colors[0]],\r\n");
      out.write("                        [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]\r\n");
      out.write("                    ]\r\n");
      out.write("                },\r\n");
      out.write("                lineWidth: 1,\r\n");
      out.write("                marker: {\r\n");
      out.write("                    enabled: false\r\n");
      out.write("                },\r\n");
      out.write("                shadow: false,\r\n");
      out.write("                states: {\r\n");
      out.write("                    hover: {\r\n");
      out.write("                        lineWidth: 1\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                threshold: null\r\n");
      out.write("            }\r\n");
      out.write("        },\r\n");
      out.write("        series: datas\r\n");
      out.write("\r\n");
      out.write("    }).highcharts(); // return chart\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// create the master chart\r\n");
      out.write("function createMaster(datas,index) {\r\n");
      out.write("\tmasterChart = $('#master-container'+index).highcharts({\r\n");
      out.write("        chart: {\r\n");
      out.write("        \ttype:'spline',\r\n");
      out.write("            reflow: false,\r\n");
      out.write("            borderWidth: 0,\r\n");
      out.write("            backgroundColor: null,\r\n");
      out.write("            marginLeft: maxSize * 10 + 20,\r\n");
      out.write("            marginRight: 20,\r\n");
      out.write("            zoomType: 'x',\r\n");
      out.write("            events: {\r\n");
      out.write("                selection: function (event) {\r\n");
      out.write("                \t/***\r\n");
      out.write("                    var extremesObject = event.xAxis[0],\r\n");
      out.write("                        min = extremesObject.min,\r\n");
      out.write("                        max = extremesObject.max,\r\n");
      out.write("                        detailData = [],\r\n");
      out.write("                        xAxis = this.xAxis[0];\r\n");
      out.write("\t                    xAxis.removePlotBand('mask-after');\r\n");
      out.write("\t                    xAxis.addPlotBand({\r\n");
      out.write("\t                        id: 'mask-after',\r\n");
      out.write("\t                        from: max,\r\n");
      out.write("\t                        to: min,\r\n");
      out.write("\t                        color: 'rgba(0, 0, 0, 0.2)'\r\n");
      out.write("\t                    });\r\n");
      out.write("\t                    for(var a = 0; a < this.series.length; a++){\r\n");
      out.write("\t\t                    detailDataChild = [];\r\n");
      out.write("\t                    \t$.each(this.series[a].data, function () {\r\n");
      out.write("\t\t                        if (this.x > min && this.x < max) {\r\n");
      out.write("\t\t                            detailDataChild.push([this.x,this.y]);\r\n");
      out.write("\t\t                        }\r\n");
      out.write("\t\t                    });\r\n");
      out.write("\t                    \tdetailChart.series[a].setData(detailDataChild);\r\n");
      out.write("\t                    }***/\r\n");
      out.write("\t                    return false;\r\n");
      out.write("\t                }\r\n");
      out.write("            }\r\n");
      out.write("        },\r\n");
      out.write("        title: {\r\n");
      out.write("            text: null\r\n");
      out.write("        },\r\n");
      out.write("        xAxis: {\r\n");
      out.write("            type: 'datetime',\r\n");
      out.write("            labels:{\r\n");
      out.write("            \tformatter:function(){\r\n");
      out.write("            \t\treturn Highcharts.dateFormat('%H:%M',this.value);\r\n");
      out.write("            \t}\r\n");
      out.write("            },\r\n");
      out.write("            title: {\r\n");
      out.write("                text: null\r\n");
      out.write("            }\r\n");
      out.write("        },\r\n");
      out.write("        yAxis: {\r\n");
      out.write("            labels: {\r\n");
      out.write("                enabled: false\r\n");
      out.write("            },\r\n");
      out.write("            floor:0,\r\n");
      out.write("            title: {\r\n");
      out.write("                text: null\r\n");
      out.write("            }\r\n");
      out.write("        },\r\n");
      out.write("        tooltip: {\r\n");
      out.write("            formatter: function () {\r\n");
      out.write("                return false;\r\n");
      out.write("            }\r\n");
      out.write("        },\r\n");
      out.write("        legend: {\r\n");
      out.write("            enabled: false\r\n");
      out.write("        },\r\n");
      out.write("        credits: {\r\n");
      out.write("            enabled: false\r\n");
      out.write("        },\r\n");
      out.write("        plotOptions: {\r\n");
      out.write("            series: {\r\n");
      out.write("                fillColor: {\r\n");
      out.write("                    linearGradient: [0, 0, 0, 70],\r\n");
      out.write("                    stops: [\r\n");
      out.write("                        [0, Highcharts.getOptions().colors[0]],\r\n");
      out.write("                        [1, 'rgba(255,255,255,0)']\r\n");
      out.write("                    ]\r\n");
      out.write("                },\r\n");
      out.write("                lineWidth: 1,\r\n");
      out.write("                marker: {\r\n");
      out.write("                    enabled: false\r\n");
      out.write("                },\r\n");
      out.write("                shadow: false,\r\n");
      out.write("                states: {\r\n");
      out.write("                    hover: {\r\n");
      out.write("                        lineWidth: 1\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                enableMouseTracking: false\r\n");
      out.write("            }\r\n");
      out.write("        },\r\n");
      out.write("        series: datas\r\n");
      out.write("\r\n");
      out.write("    }, function (masterChart) {\r\n");
      out.write("        createDetail(masterChart,datas,index);\r\n");
      out.write("    })\r\n");
      out.write("        .highcharts(); // return chart instance\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function updateOnlineNum(isCharts){\r\n");
      out.write("\tvar exportUrl;\r\n");
      out.write("\tif(nowIndex == 0){\r\n");
      out.write("\t\tshowDiv(true);\r\n");
      out.write("\t\tChartsGetData(areaUrl,nowIndex);\r\n");
      out.write("\t\texportUrl = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/stat/online/export.do\";\r\n");
      out.write("\t}else if(nowIndex == 1){\r\n");
      out.write("\t\tshowDiv(false);\r\n");
      out.write("\t\tChartsGetData(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/stat/online/online4platform.do\",nowIndex);\r\n");
      out.write("\t\texportUrl = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/stat/online/exportPlat.do\";\r\n");
      out.write("\t}\r\n");
      out.write("\tvar data = statisticsData[nowIndex];\r\n");
      out.write("\tif(data.length == 0 ){\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tdata[0].color = '#8abced';\r\n");
      out.write("\tdata[0].lineWidth=1;\r\n");
      out.write("\tif(data[1]){\r\n");
      out.write("\t\tdata[1].color = '#10296b';\r\n");
      out.write("\t\tdata[1].lineWidth=1;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\tif(isCharts){\r\n");
      out.write("\t\t/***\r\n");
      out.write("\t\tvar result = data[data.length-1];\r\n");
      out.write("\t\tvar resultValue = result.data;\r\n");
      out.write("\t\tvar last = resultValue[resultValue.length-1];\r\n");
      out.write("\t\tvar startTimeHour = getHMS(last[0]);\r\n");
      out.write("\t\tvar endTimeHour = getQueryEndTime(last[0]);\r\n");
      out.write("\t\tvar startTime = result.name+\" \"+startTimeHour;\r\n");
      out.write("\t\tvar endTime = result.name+\" \"+endTimeHour;\r\n");
      out.write("\t\t//只有小时和分钟比之前大才请求\r\n");
      out.write("\t\tif(isQueryData(last[0])){\r\n");
      out.write("\t\t\tif(!queryConfig){\r\n");
      out.write("\t\t\t\t//初始化\r\n");
      out.write("\t\t\t\tqueryConfig = {url:'");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/stat/online/timerOnlineNum.do',data:{startTime:startTime,endTime:endTime}};\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tasyncUpdateChart(queryConfig,dynamicUpdateData);\r\n");
      out.write("\t\t}*/\r\n");
      out.write("\t\t//createMaster(data,nowIndex);\r\n");
      out.write("\t\tcreateDetail(null,data,nowIndex);\r\n");
      out.write("\t}else{\r\n");
      out.write("\t\tcreateDataGridView(data,nowIndex,exportUrl);\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function initChart(){\r\n");
      out.write("\t$(\"#tabs\").tabs({\r\n");
      out.write("\t\tborder:true,\r\n");
      out.write("\t\ttabWidth:200,\r\n");
      out.write("\t\ttabHeight:40,\r\n");
      out.write("\t\tonSelect:function(title){\r\n");
      out.write("\t\t\tif($(\"#tabs .easyui-tabs:visible>.tabs-panels\").size() == 0){\r\n");
      out.write("\t\t\t\t$(\"#tabs .easyui-tabs:visible\").each(function(){\r\n");
      out.write("\t\t\t\t\t$(this).tabs({\r\n");
      out.write("\t\t\t\t\t\tborder:true,\r\n");
      out.write("\t\t\t\t\t\tonSelect:function(title){\r\n");
      out.write("\t\t\t\t\t\t\tvar parentTitleList = $(\"#tabs>.tabs-header>\").find(\".tabs-title\");\r\n");
      out.write("\t\t\t\t\t\t\tvar nowParentTitle = $(\".tabs>.tabs-selected>.tabs-inner>.tabs-title\").html();\r\n");
      out.write("\t\t\t\t\t\t\tfor(var a = 0 ; a < parentTitleList.length ; a++){\r\n");
      out.write("\t\t\t\t\t\t\t\tvar info = parentTitleList.get(a).innerHTML;\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif(info == nowParentTitle){\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tnowIndex = a;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tupdateOnlineNum(title == \"图表\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\tvar nowChildTitle = $(\"tabs>.tabs-panels\");\r\n");
      out.write("\t\t\t\tvar list = $(\".tabs-title\");\r\n");
      out.write("\t\t\t\tfor(var a = 0 ; a < list.length ; a++){\r\n");
      out.write("\t\t\t\t\tvar info = list.get(a).innerHTML;\r\n");
      out.write("\t\t\t\t\t\tif(info == title){\r\n");
      out.write("\t\t\t\t\t\t\tvar nowChildTitle = $(\".childTabs:visible .tabs-selected .tabs-title\").html();\r\n");
      out.write("\t\t\t\t\t\t\tnowIndex = a;\r\n");
      out.write("\t\t\t\t\t\t\tupdateOnlineNum(nowChildTitle == \"图表\");\r\n");
      out.write("\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function refreshInfo(){\r\n");
      out.write("\tvar childTitle = $(\".childTabs:visible .tabs-selected .tabs-title\").html();\r\n");
      out.write("\tupdateOnlineNum(childTitle == \"图表\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("$(function(){\r\n");
      out.write("\tregisterBfSelect();\r\n");
      out.write("\tfor(var i = 0 ; i < 3 ; i++){\r\n");
      out.write("\t\tstatisticsData[i] = [];\r\n");
      out.write("\t\tvar $container = $('#container'+i).css('position', 'relative');\r\n");
      out.write("\t\t$('<div id=\"detail-container'+i+'\">').appendTo($container);\r\n");
      out.write("\t\t$('<div id=\"master-container'+i+'\">').css({ position: 'absolute', top: 300, height: 100, width: '100%' })\r\n");
      out.write("\t\t    .appendTo($container);\r\n");
      out.write("\t}\r\n");
      out.write("\tinitDatePicker({func:refreshInfo,days:1});\r\n");
      out.write("\tinitChart();\r\n");
      out.write("\tselectServerList();\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("function createDataGridView(data,index,exportUrl){\r\n");
      out.write("\tvar list = new Array();\r\n");
      out.write("\tfor(var a = 0 ; a < data.length ; a++){\r\n");
      out.write("\t\tfor(var b = 0 ; b < data[a].data.length ; b++){\r\n");
      out.write("\t\t\tlist.push({num:data[a].data[b][1],time:data[a].name+\" \"+Highcharts.dateFormat(\"%H:%M:%S\",data[a].data[b][0])});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\tlist.sort(function(z,x){\r\n");
      out.write("\t\tvar zdate = new Date(z.time.replace(/-/g,\"/\"));\r\n");
      out.write("\t\tvar xdate = new Date(x.time.replace(/-/g,\"/\"));\r\n");
      out.write("\t\treturn zdate.getTime()-xdate.getTime()>0?1:-1;\r\n");
      out.write("\t});\r\n");
      out.write("\tvar beginTime = $(\"#startTime\").val();\r\n");
      out.write("\tvar endTime = timeStrAdd($(\"#endTime\").val(),1);\r\n");
      out.write("\t$(\"#dataGrid\"+index).datagrid({\r\n");
      out.write("\t\tdata:list,\r\n");
      out.write("\t\tfitColumns:true,\r\n");
      out.write("\t\trowStyler:function(index,row){\r\n");
      out.write("\t\t\treturn 'height:50px';\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tcolumns:[[\r\n");
      out.write("\t\t\t\t\t{field:\"time\",title:\"时间\",align:\"center\",width:25},\r\n");
      out.write("\t\t\t\t\t{field:\"num\",title:\"日活跃玩家数\",align:\"center\",width:25},\r\n");
      out.write("\t\t\t\t\t//{title:\"<a href='\"+exportUrl+\"?beginTime=\"+beginTime+\"&endTime=\"+endTime+\"'>导出excel</a>\",align:\"center\",width:25}\r\n");
      out.write("\t\t\t\t\t{title:\"<a href='#' onclick='exportExcel()'>导出excel</a>\",align:\"center\",width:25}\r\n");
      out.write("\t\t        ]]\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function ChartsGetData(url,index){\r\n");
      out.write("\tstatisticsData[index] = [];\r\n");
      out.write("\t$.ajax({url:url,data:{\"startTime\":$(\"#startTime\").val(),\"endTime\":timeStrAdd($(\"#endTime\").val(),1),areaId:getQueryAreaId()},async:false,\r\n");
      out.write("\t\tsuccess:function(data) {\r\n");
      out.write("\t\t\tif(!data[0]){\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tvar beforeTime = new Date(getRealServerTime(data[0].addTime,'");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${timezonerawoffset}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("')).Format(\"yyyy-MM-dd\");\r\n");
      out.write("\t\t\tvar result = {data:[]};\r\n");
      out.write("\t\t\t for(var i = 0 ; i < data.length ; i++){\r\n");
      out.write("\t\t\t\t var date = new Date(getRealServerTime(data[i].addTime,'");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${timezonerawoffset}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("'));\t\t//时区转换\r\n");
      out.write("\t\t\t\t //var date = new Date(data[i].addTime);\r\n");
      out.write("\t\t\t\t if(date.Format(\"yyyy-MM-dd\") != beforeTime){\r\n");
      out.write("\t\t\t\t\t result.name = beforeTime;\r\n");
      out.write("\t\t\t\t\t statisticsData[index].push(result);\r\n");
      out.write("\t\t\t\t\t beforeTime = date.Format(\"yyyy-MM-dd\");\r\n");
      out.write("\t\t\t\t\t result = {data:[]};\r\n");
      out.write("\t\t\t\t }\r\n");
      out.write("\t\t\t\t\t var hour = date.getHours();\r\n");
      out.write("\t\t\t\t\t var min = date.getMinutes();\r\n");
      out.write("\t\t\t\t\t var sec = date.getSeconds();\r\n");
      out.write("\t\t\t\t maxSize = Math.max(data[i].num.toString().length,maxSize);\r\n");
      out.write("\t\t\t\t //按照小时和分钟来比较两组数据需要确保年 月 日都是一样的\r\n");
      out.write("\t\t\t\t result.data.push([Date.UTC(2000,1,1,hour,min,sec),data[i].num]);\r\n");
      out.write("\t\t\t }\r\n");
      out.write("\t\t\tresult.name = beforeTime;\r\n");
      out.write("\t\t\tstatisticsData[index].push(result);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("function dynamicUpdateData(data){\r\n");
      out.write("\tif(data.length>0){\r\n");
      out.write("\t\tvar series = detailChart.series;\r\n");
      out.write("\t\tvar updateIndex = 0;\r\n");
      out.write("\t    if(series != undefined){\r\n");
      out.write("\t    \tupdateIndex = series.length-1;\r\n");
      out.write("\t    \tvar localZone = new Date().getTimezoneOffset() * 60000;\r\n");
      out.write("\t    \tvar chartData = detailChart.series[updateIndex].data;\r\n");
      out.write("\t    \tvar minX= 0;\r\n");
      out.write("\t\t\tif(chartData.length>0){\r\n");
      out.write("\t\t\t\tvar curValue = chartData[chartData.length-1];\r\n");
      out.write("\t\t\t\tminX = curValue.x;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t    \tfor(var i =0;i<data.length;i++){\r\n");
      out.write("\t\t\t\tvar toAddDate = new Date(parseInt(data[i].addTime) - localZone);\t\t//时区转换\r\n");
      out.write("\t\t\t\ttoAddDate.setUTCFullYear(2000, 1, 1);\r\n");
      out.write("\t\t\t\tvar x = toAddDate.getTime();\r\n");
      out.write("\t\t\t\tvar y = data[i].num;\r\n");
      out.write("\t\t\t\tif(x>minX){\r\n");
      out.write("\t\t\t\t\tdetailChart.series[updateIndex].addPoint([x,y],true,false);\r\n");
      out.write("\t\t\t\t\tmasterChart.series[updateIndex].addPoint([x,y],true,false);\r\n");
      out.write("\t\t\t\t\t//需要更新请求条件时间\r\n");
      out.write("\t\t\t\t\tvar startTime = series[updateIndex].name+\" \"+ getHMS(x);\r\n");
      out.write("\t\t\t\t\tvar endTime = series[updateIndex].name+\" \"+ getQueryEndTime(x);\r\n");
      out.write("\t\t\t\t\tif(isQueryData(x)){\r\n");
      out.write("\t\t\t\t\t\tqueryConfig.data={startTime:startTime,endTime:endTime};\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\telse{\r\n");
      out.write("\t\t\t\t\t\t//需要停止定时器\r\n");
      out.write("\t\t\t\t\t\tstopTimer(queryConfig.timer);\r\n");
      out.write("\t\t\t\t\t\t//console.log(\"定时器停止运行\");\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\telse{\r\n");
      out.write("\t\t\t\t\t//console.log(\"不符合时间：\"+x+\" 值：\"+minX);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t    \t}\r\n");
      out.write("\t    }\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//根据url 异步获取数据  回调更新图表\r\n");
      out.write("function asyncUpdateChart(config,updateChart){\r\n");
      out.write("\t//如果定时器存在  则关闭之前的定时器\r\n");
      out.write("\tif(config.timer!=undefined){\r\n");
      out.write("\t\tclearInterval(config.timer);\r\n");
      out.write("\t}\r\n");
      out.write("\tconfig.timer = setInterval(function(){\r\n");
      out.write("\t\t$.ajax({url:config.url,data:config.data,async:config.async||false,\r\n");
      out.write("\t\t\tsuccess:function(data){\r\n");
      out.write("\t\t\t\tupdateChart(data);\r\n");
      out.write("\t\t\t}});\r\n");
      out.write("\t},config.time||1000*60*5);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function getQueryEndTime(startTime){\r\n");
      out.write("\t//大概是10分钟的间隔\r\n");
      out.write("\treturn getHMS(startTime + 600000);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//获取格式化后的结果\r\n");
      out.write("function getHMS(time){\r\n");
      out.write("\t\r\n");
      out.write("   return Highcharts.dateFormat(\"%H:%M:%S\",time);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//比较时间\r\n");
      out.write("function isQueryData(startTime){\r\n");
      out.write("\tvar startTimeHour = getHMS(startTime);\r\n");
      out.write("\tvar endTimeHour = getQueryEndTime(startTime);\r\n");
      out.write("\tvar startArray = startTimeHour.split(\":\");\r\n");
      out.write("\tvar endArray = endTimeHour.split(\":\");\r\n");
      out.write("\tif(endArray[0]>startArray[0] || ((endArray[0] == startArray[0]) && (endArray[1]>startArray[1]))){\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t}\r\n");
      out.write("\treturn false;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//停止定时器\r\n");
      out.write("function stopTimer(timer){\r\n");
      out.write("\tif(timer!=undefined){\r\n");
      out.write("\t\tclearInterval(timer);\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//导出Excel\r\n");
      out.write("//服务器参照：https://raw.githubusercontent.com/highslide-software/highcharts.com/master/studies/csv-export/csv.php\r\n");
      out.write("function exportExcel(){\r\n");
      out.write("\tvar data = $(\"#dataGrid\"+nowIndex).datagrid('getData');\r\n");
      out.write("\tvar headArray = [{time:\"时间\",num:\"人数\"}];\r\n");
      out.write("\tpostCSVData(\"在线人数.xls\",headArray.concat(data.rows));\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/**\r\n");
      out.write(" *filename 文件名\r\n");
      out.write(" *data     数据 array\r\n");
      out.write(" ***/\r\n");
      out.write("function postCSVData(filename,data){\r\n");
      out.write("\tif(!data){\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tvar line ='';\r\n");
      out.write("\tfor(var i =0;i<data.length;i++){\r\n");
      out.write("\t\tvar num = data[i].num;\r\n");
      out.write("\t\tvar time = data[i].time;\r\n");
      out.write("\t\tif(line == ''){\r\n");
      out.write("\t\t\tline = time+\",\"+num;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse{\r\n");
      out.write("\t\t\tline += \";\" + time+\",\"+num;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t//window.open('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/stat/exportfile/file.do?data='+line+'&type=csv&fileName='+filename);\r\n");
      out.write("\tHighcharts.post('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/stat/exportfile/file.do',{\r\n");
      out.write("\t        data: line,\r\n");
      out.write("\t        type: 'csv',\r\n");
      out.write("\t        fileName:filename\r\n");
      out.write("\t      });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fforEach_005f0.setParent(null);
    // /WEB-INF/jsp/stat/online/index.jsp(29,157) name = items type = java.lang.Object reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f0.setItems((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${gameAreas }", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
    // /WEB-INF/jsp/stat/online/index.jsp(29,157) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f0.setVar("gameArea");
    int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
    try {
      int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
      if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          if (_jspx_meth_c_005fif_005f0(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
            return true;
          int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
    } finally {
      _jspx_th_c_005fforEach_005f0.doFinally();
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fif_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
    // /WEB-INF/jsp/stat/online/index.jsp(29,205) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${areaId == gameArea.areaId}", java.lang.Boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false)).booleanValue());
    int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
    if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${gameArea.areaName }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005fforEach_005f1.setParent(null);
    // /WEB-INF/jsp/stat/online/index.jsp(32,22) name = items type = java.lang.Object reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f1.setItems((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${gameAreas }", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
    // /WEB-INF/jsp/stat/online/index.jsp(32,22) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f1.setVar("gameArea");
    int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
    try {
      int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
      if (_jspx_eval_c_005fforEach_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("                   \t\t\t<li><a href=\"javascript:void(0);\" onclick=\"return false;\" _search_type=\"1\" value=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${gameArea.areaId }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
          out.write('"');
          out.write('>');
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${gameArea.areaName }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
          out.write("</a></li>\r\n");
          out.write("                   \t\t");
          int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fforEach_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
    } finally {
      _jspx_th_c_005fforEach_005f1.doFinally();
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f1);
    }
    return false;
  }
}
